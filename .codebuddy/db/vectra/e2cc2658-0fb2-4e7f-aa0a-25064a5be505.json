{"chunk":1,"numChunks":2,"fileHash":"HaR927wLcUBt1v4iaSgIVOMHVkTulMSJ9qRxHNFMtEs=","filePath":"backend/resolvers/queries/portfolioPeriodQuery.js","content":"import PortfolioPeriod from '../../models/portfolioPeriod'\nexport async function portfolioPeriods(_, args, context) {\n    if(context.authType === JUDGE){\n        return await handleJudgePortfolioPeriods(_, args, context)\n    }\n    // Apply ordering, if desired\n    const order = args.orderBy ? { order: [[args.orderBy.sort, args.orderBy.direction]] } : {};\n    // If the active parameter is sent query for only active portfolio periods (submissions OR judging it open)\n    if (args.active) {\n        const today = moment().toDate()\n        const whereClause = {\n            where: {\n                startDate: {\n                    $lte: today\n                },\n                judgingEndDate: {\n                    $gte: today\n                }\n            }\n        }\n        return PortfolioPeriod.findAll(Object.assign({}, whereClause, order))\n    }\n    // If the activeSubmissions parameter is sent query for only portfolio periods accepting submissions\n    if (args.activeSubmission) {\n        const today = moment().toDate()\n        const whereClause = {\n            where: {\n                startDate: {\n                    $lte: today\n                },\n                endDate: {\n                    $gte: today\n                }\n            }\n        }\n        return PortfolioPeriod.findAll(Object.assign({}, whereClause, order))\n    }\n    // If the activeJudging parameter is sent query for only portfolio periods accepting submissions\n    if (args.activeJudging) {\n        const today = moment().toDate()\n        const whereClause = {\n            where: {\n                judgingStartDate: {\n                    $lte: today\n                },\n                judgingEndDate: {\n                    $gte: today\n                }\n            }\n        }\n        return PortfolioPeriod.findAll(Object.assign({}, whereClause, order))\n    }\n    return PortfolioPeriod.findAll(order);\n}"}