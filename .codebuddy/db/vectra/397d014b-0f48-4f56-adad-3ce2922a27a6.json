{"chunk":0,"numChunks":1,"fileHash":"BP9i6x+J1a7ktZIaBk2cRtUV19k7rl7UiuXQ3D+0P/g=","filePath":"backend/models/vote.js","content":"import User from './user'\r\nimport Entry from './entry'\r\nimport DataTypes from 'sequelize'\r\nimport sequelize from '../config/sequelize'\r\nimport { ALLOWED_VOTE_VALUES } from '../constants'\r\n\r\nconst Vote = sequelize.define('vote', {\r\n  judgeUsername: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false,\r\n    references: {\r\n      model: 'users',\r\n      key: 'username'\r\n    },\r\n    onDelete: 'cascade',\r\n    onUpdate: 'cascade'\r\n  },\r\n  entryId: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false,\r\n    references: {\r\n      model: 'entry',\r\n      key: 'id'\r\n    },\r\n    onDelete: 'cascade',\r\n    onUpdate: 'cascade'\r\n  },\r\n  value: {\r\n    type: DataTypes.INTEGER,\r\n    allowNull: false\r\n  }\r\n},\r\n{\r\n  validate: {\r\n    voteValueValidation () {\r\n      if (!ALLOWED_VOTE_VALUES.has(this.value)) {\r\n        throw new Error('Vote value must be 0, 1, or 2')\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n/**\r\n * Gets the judge for the vote as a Promise\r\n */\r\nVote.prototype.getJudge = function getJudge () {\r\n  if (!this.judgeUsername) {\r\n    return Promise.resolve(null)\r\n  }\r\n  return User.findByPk(this.judgeUsername)\r\n}\r\n\r\n/**\r\n * Gets the entry for the vote as a Promise\r\n */\r\nVote.prototype.getEntry = function getEntry () {\r\n  if (!this.entryId) {\r\n    return Promise.resolve(null)\r\n  }\r\n  return Entry.findByPk(this.entryId)\r\n}\r\n\r\nexport default Vote\r\n"}