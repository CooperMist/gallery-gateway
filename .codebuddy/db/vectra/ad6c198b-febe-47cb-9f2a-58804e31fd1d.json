{"chunk":0,"numChunks":1,"fileHash":"qfmcHrVzomsZxAzs3KgckpLKQ1Oy+uE4dplRDXbHpT0=","filePath":"backend/config/passport.js","content":"import passport from 'passport'\nimport {Strategy} from 'passport-saml'\nimport config from './index'\nimport User from '../models/user'\nimport { STUDENT } from '../constants'\nconst samlConfig = config.get('auth:saml')\nexport const samlStrategy = new Strategy({\n  // URL that goes from the Identity Provider -> Service Provider\n  callbackUrl: samlConfig.callbackUrl,\n  // URL that goes from the Service Provider -> Identity Provider\n  entryPoint: samlConfig.entryPoint,\n  // Usually specified as `/shibboleth` from site root\n  issuer: samlConfig.issuer,\n  identifierFormat: null,\n  // Service Provider private key\n  decryptionPvk: samlConfig.decryptionPvk,\n  // Service Provider Certificate\n  privateCert: samlConfig.privateCert,\n  // Identity Provider's public key\n  cert: samlConfig.cert,\n  validateInResponseTo: false,\n  disableRequestedAuthnContext: true\n}, async function (profile, done) {\n  // We've received login success, we need to look up the user\n  if (config.get('NODE_ENV') !== 'production') {\n    profile.uid = profile.email.replace('@example.com', '')\n    profile.givenName = 'Unknown'\n    profile.sn = 'Unknown'\n  }\n\n  if (!profile.uid || !profile.givenName || !profile.sn) {\n    return done('Profile is missing a property', null)\n  }\n\n  const [user, created] = await User\n    .findOrCreate({\n      where: { username: profile.uid },\n      defaults: {\n        firstName: profile.givenName,\n        lastName: profile.sn,\n        type: STUDENT\n      }\n    })\n  const thing = await Promise.all([user.save(), created])\n  done(null, thing[0])\n})\npassport.serializeUser((user, done) => {\n  done(null, user)\n})"}