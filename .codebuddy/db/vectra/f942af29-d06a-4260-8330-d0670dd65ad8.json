{"chunk":0,"numChunks":1,"fileHash":"lISImixZdaImzVZaXucQEqVD9Dg3TiNBpp4cx5sM9nc=","filePath":"backend/config/auth.js","content":"import fs from 'fs'\r\n\r\nconst privateCert = fs.existsSync('./keys/private.key')\r\n  ? fs.readFileSync('./keys/private.key', 'utf-8') : ''\r\nconst publicCert = fs.existsSync('./keys/public.key')\r\n  ? fs.readFileSync('./keys/public.key', 'utf-8') : ''\r\n\r\nexport default {\r\n  jwt: {\r\n    secret: privateCert.toString(),\r\n    pub: publicCert.toString(),\r\n    expiresInMinutes: 60 * 24 * 2,\r\n    downloadTokenExpiresInMinutes: 5\r\n  },\r\n  saml: {\r\n    // URL that goes to the front-end on successful SAML finalize\r\n    finalUrl: process.env.SAML_SUCCESS_URL,\r\n    // URL that goes from the Identity Provider -> Service Provider\r\n    callbackUrl: process.env.SAML_CALLBACK_URL,\r\n    // URL that goes from the Service Provider -> Identity Provider\r\n    entryPoint: process.env.SAML_ENTRY_POINT,\r\n    // Usually specified as `/shibboleth` from site root\r\n    issuer: process.env.ISSUER,\r\n    // Service Provider private key\r\n    decryptionPvk: privateCert,\r\n    // Service Provider Certificate, private\r\n    privateCert,\r\n    // Service Provider Certificate, public\r\n    publicCert,\r\n    // Identity Provider's public key\r\n    cert: fs.readFileSync('./keys/idp_cert.pem', 'utf8').toString()\r\n  }\r\n}\r\n"}