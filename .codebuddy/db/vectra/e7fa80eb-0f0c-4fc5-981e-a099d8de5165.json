{"chunk":7,"numChunks":14,"fileHash":"5KGj9fTmdePIUoA8EInazVi4XBlW3sOIhhOCgK3ctIs=","filePath":"frontend/src/Admin/components/CreateShowForm.js","content":"import React, { Component } from 'react'\nclass CreateShowForm extends Component {\n  render () {\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          description: '',\n          entryCap: 2,\n          entryStart: null,\n          entryEnd: null,\n          judgingStart: null,\n          judgingEnd: null\n        }}\n        validationSchema={yup.object().shape({\n          name: yup.string().required('Required'),\n          description: yup.string(),\n          entryCap: yup\n            .number()\n            .integer('Must be an integer')\n            .min(1, 'Must be at least 1')\n            .required('Required'),\n          entryStart: yup\n            .date()\n            .nullable()\n            .required('Start Date is Required'),\n          entryEnd: yup\n            .date()\n            .nullable()\n            .isAfter(\n              yup.ref('entryStart'),\n              'Submission End Date must be after Submission Start Date'\n            )\n            .required('End Date is Required'),\n          judgingStart: yup\n            .date()\n            .nullable()\n            .isAfter(\n              yup.ref('entryEnd'),\n              'Judging Start Date must be after Submission End Date'\n            )\n            .required('Start Date is Required'),\n          judgingEnd: yup\n            .date()\n            .nullable()\n            .isAfter(\n              yup.ref('judgingStart'),\n              'Judging End Date must be after Judging Start Date'\n            )\n            .required('End Date is Required')\n        })}\n        onSubmit={values => {\n          create(values)\n            .then(() => done())\n            .catch(err => handleError(err.message))\n        }}"}