{"chunk":0,"numChunks":2,"fileHash":"mrmOgdnunnUhFXXaOvrnTidpY0LpNd092xWWgQnVeUk=","filePath":"backend/resolvers/mutations/portfolioPeriod.js","content":"import { UserError } from 'graphql-errors'\nimport { ADMIN } from '../../constants'\nimport PortfolioPeriod from '../../models/portfolioPeriod'\nimport PortfolioPeriodJudge from '../../models/portfolioPeriodJudge'\nimport moment from 'moment-timezone'\nexport async function createPortfolioPeriod(_, args, context) {\n  // only students can create portfolios\n  if (context.authType !== ADMIN) {\n    throw new UserError('Permission Denied')\n  }\n  const { description, name, startDate, endDate, judgingStartDate, judgingEndDate } = args.input\n\n  const entryStart = moment(startDate).tz('America/New_York').startOf('day')\n  const entryEnd = moment(endDate).tz('America/New_York').endOf('day')\n  const judgingStart = moment(judgingStartDate).tz('America/New_York').startOf('day')\n  const judgingEnd = moment(judgingEndDate).tz('America/New_York').endOf('day')\n\n  // Required portfolio period fields\n  let newPortfolioPeriod = {\n    startDate: entryStart,\n    endDate: entryEnd,\n    judgingStartDate: judgingStart,\n    judgingEndDate: judgingEnd\n  }\n\n  // Appened optional fields, check that types match expected schema type prior to appending \n  if (typeof description === \"string\") { newPortfolioPeriod.description = description };\n  if (typeof name === \"string\") { newPortfolioPeriod.name = name };\n\n  return PortfolioPeriod.create(newPortfolioPeriod)\n}\n/**\n * Handles updating portfolio periods in the database\n * from a graphql mutation\n */"}