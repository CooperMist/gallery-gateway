{"chunk":9,"numChunks":16,"fileHash":"A3iQMW4lJzxP+ZArFz9FmJvsqI0RNkula+NztweFw4Y=","filePath":"frontend/src/Admin/components/EditShowForm.js","content":"import React, { Component } from 'react'\nclass EditShowForm extends Component {\n  render () {\n    if(moment(show.entryStart).isAfter(moment())){\n    return (\n      <Formik\n        initialValues={{\n          name: show.name,\n          description: show.description,\n          entryCap: show.entryCap,\n          entryStart: moment(show.entryStart),\n          entryEnd: moment(show.entryEnd),\n          judgingStart: moment(show.judgingStart),\n          judgingEnd: moment(show.judgingEnd)\n        }}\n        validationSchema={yup.object().shape({\n          name: yup.string().required('Required'),\n          description: yup.string(),\n          entryCap: yup\n            .number()\n            .integer('Must be an integer')\n            .min(1, 'Must be at least 1')\n            .required('Required'),\n          entryStart: yup\n            .date()\n            .nullable()\n            .required('Start Date is Required'),\n          entryEnd: yup\n            .date()\n            .nullable()\n            .isAfter(\n              yup.ref('entryStart'),\n              'Submission End Date must be after Submission Start Date'\n            )\n            .required('End Date is Required'),\n          judgingStart: yup\n            .date()\n            .nullable()\n            .isAfter(\n              yup.ref('entryEnd'),\n              'Judging Start Date must be after Submission End Date'\n            )\n            .required('Start Date is Required'),\n          judgingEnd: yup\n            .date()\n            .nullable()\n            .isAfter(\n              yup.ref('judgingStart'),\n              'Judging End Date must be after Judging Start Date'\n            )\n            .required('End Date is Required')\n        })}\n        onSubmit={values => {\n          values.entryStart\n          values.entryEnd\n          values.judgingStart\n          values.judgingEnd\n          update(values)\n            .then(() => done())\n            .catch(err => handleError(err.message))\n        }}"}