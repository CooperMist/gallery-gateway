{"chunk":1,"numChunks":51,"fileHash":"a+FASeiRPRDZBZ0S/9mF+yVl99YVRCx6NJRkd9d3q0M=","filePath":"backend/routes/download.js","content":"import fs from 'fs'\nconst groupEntriesBySubmitter = (entries) => {\n  // Now we need to group entries by who is submitting,\n  // Params:\n  //   entries: [Entry] with the `path` attribute set\n  // Evaluates to:\n  //   {\n  //     studentSubmissions: {\n  //       xxx1233: [entry, ...],\n  //       ...\n  //     },\n  //     groupSubmissions: {\n  //       4: [entry, ...],\n  //       ...\n  //     }\n  //   }\n\n  // maps usernames to their entries\n  // example:\n  // {\n  //   xxx1234: [entry, ...]\n  // }\n  const studentSubmissions = entries\n    .filter(entry => entry.isStudentSubmission() && !entry.isGroupSubmission())\n    .reduce((accum, elem) => ({\n      ...accum,\n      [elem.studentUsername]: [...(accum[elem.studentUsername] || []), elem]\n    }), {})\n\n  // maps group ids to their entries\n  // example:\n  // {\n  //   4: [entry, ...]\n  // }\n  const groupSubmissions = entries\n    .filter(entry => entry.isGroupSubmission())\n    .reduce((accum, elem) => ({\n      ...accum,\n      [elem.groupId]: [...(accum[elem.groupId] || []), elem]\n    }), {})\n\n  return {\n    studentSubmissions,\n    groupSubmissions\n  }\n}"}