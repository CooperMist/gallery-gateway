{"chunk":0,"numChunks":1,"fileHash":"OPHAMuHWRtWtzPKQBEkfQ9Z9BNMPNv5VoIOAKs3y8FU=","filePath":"backend/resolvers/mutations/vote.js","content":"import Vote from '../../models/vote'\nimport Entry from '../../models/entry'\nimport User from '../../models/user'\nimport { UserError } from 'graphql-errors'\nimport { ADMIN, JUDGE, STUDENT } from '../../constants'\nfunction judgeIsAllowedToVote (judgeUsername, entryId, userType) {\n  // Admins can vote on any show\n  if (userType === ADMIN) {\n    return Promise.resolve()\n  }\n\n  // Students may not vote\n  if (userType === STUDENT) {\n    return Promise.reject(new UserError('Students may not vote'))\n  }\n\n  // Judges may only vote on entries submitted to shows they've been assigned to.\n  return User.findByPk(judgeUsername).then(judge => {\n    return Entry.findByPk(entryId).then(entry => {\n      if (!entry) {\n        return Promise.reject(new UserError('Cannot find entry'))\n      }\n      return judge.getShows().then(assignedShows => {\n        // Make sure the array contains the show this entry is part of\n        const allowedToVote = assignedShows.filter(show => show.id === entry.showId)\n        if (allowedToVote.length === 0) {\n          return Promise.reject(new UserError('Judge is not allowed to vote on this entry'))\n        }\n        return Promise.resolve()\n      })\n    })\n  })\n}"}