{"chunk":0,"numChunks":1,"fileHash":"+vRNCIFhL1dpJPoHS39wR8qitAhlsg+wbyXyUgzL0gg=","filePath":"frontend/config/apollo.js","content":"import fetch from 'unfetch'\nimport { ApolloClient } from 'apollo-client'\nimport { HttpLink, InMemoryCache } from 'apollo-client-preset'\nimport { ApolloLink } from 'apollo-link'\nimport { onError } from 'apollo-link-error'\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\nimport { GRAPHQL_PATH } from '../src/utils'\nconst httpLink = new HttpLink({uri: GRAPHQL_PATH, fetch})\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  const token = localStorage.getItem('_token_v1')\n  operation.setContext({\n    headers: {\n      authorization: token ? 'Bearer ' + token : null\n    }\n  })\n\n  return forward(operation)\n})\nconst errorMiddleware = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    // TODO\n    console.log(graphQLErrors)\n  }\n  if (networkError) {\n    // TODO\n    console.log(networkError)\n  }\n})\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: {\n    __schema: {\n      types: [\n        {\n          kind: 'INTERFACE',\n          name: 'Entry',\n          possibleTypes: [\n            {\n              name: 'Photo'\n            },\n            {\n              name: 'Video'\n            },\n            {\n              name: 'OtherMedia'\n            }\n          ]\n        }\n      ]\n    }\n  }\n})"}