{"chunk":6,"numChunks":7,"fileHash":"74ZENdnzYhI/s8DZ0FDfGhCHNceKVpYUriAanC6HxU4=","filePath":"frontend/src/Judge/reducers.js","content":"import { combineReducers } from 'redux'\nconst ratingQueue = (state = initialRatingQueueState, action) => {\n  switch (action.type) {\n    case actions.FETCH_PORTFOLIOS:\n      if(action.payloud.portfolios == null) {\n        return state\n      }\n      const portfolioIds = action.payload.portfolios.map(\n        portfolio => portfolio.id\n      )\n      const shuffledOrder = repeatableShuffle(\n        action.payload.username,\n        portfolioIds,\n        x => x\n      )\n      return {\n        ...state,\n        order: shuffledOrder,\n        loadingPortfolios: false\n      }\n    case actions.FETCH_PORTFOLIO_RATINGS:\n      return {\n        ...state,\n        loadingRatings: false\n      }\n    case actions.WILL_FETCH_PORTFOLIOS:\n      return {\n        ...state,\n        loadingPortfolios: true\n      }\n    case actions.WILL_FETCH_PORTFOLIO_RATINGS:\n      return {\n        ...state,\n        loadingRatings: true\n      }\n    default:\n      return state\n  }\n}\n// Each portfolioPeriod has a queue whose key in the queues state is the period's id\n// Example State:\n// {\n//   1: {order: ['1', '2', '3'], loadingPortfolios: true, loadingRatings: false},\n//   2: {order: ['9', '4', '5', '8', '6', '7'], loadingPortfolios: true, loadingRatings: false}\n// }"}