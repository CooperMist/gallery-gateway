{"chunk":26,"numChunks":27,"fileHash":"nTZOypT/nEM5cNuamEG+wsQ/tKipVKAjaQgt5wY72EQ=","filePath":"backend/test/resolvers/show.js","content":"/* eslint-disable no-unused-expressions */\ndescribe('Show Resolvers', function () {\n  describe('Unassign from show', function () {\n    it('Does not allow non-admins', function () {\n      expect(() =>\n        removeFromShow('', {}, {auth: {type: 'STUDENT', username: 'billy'}})\n      ).to.throw(/Permission Denied/)\n    })\n    it('Notifies when show does not exist', () =>\n      fakeShow().then(show => {\n        const input = {showId: show.id, usernames: ['user1']}\n        return removeFromShow('', input, {auth: {type: 'ADMIN'}})\n          .catch((err) => {\n            expect(err).to.exist\n            expect(err.message).to.equal('Show Not Found')\n          })\n      })\n    )\n    it('Does not allow an empty list of usernames', function (done) {\n      fakeShow().then((s) => {\n        expect(() => {\n          const input = {showId: s.id, usernames: []}\n          removeFromShow('', input, {auth: {type: 'ADMIN'}})\n        }).to.throw(/Please input one or more usernames/)\n        done()\n      })\n    })\n    it('Removes input users from show', function (done) {\n      fakeShow().then((s) => {\n        Promise.all([fakeUser({username: 'user1'}), fakeUser({username: 'user2'})]).then(() => {\n          const input = {showId: s.id, usernames: ['user1', 'user2']}\n          removeFromShow('', input, {auth: {type: 'ADMIN'}})\n            .then((result) => {\n              expect(result).to.exist\n              expect(result).to.equal(true)\n              done()\n            })\n        })\n      })\n    })"}