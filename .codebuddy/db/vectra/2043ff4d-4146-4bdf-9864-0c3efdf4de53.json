{"chunk":0,"numChunks":1,"fileHash":"+Qnft+c2pN5Y2JR3QVWc/48LmKExKSmvKlWyGjj2jsM=","filePath":"backend/resolvers/types/entryType.js","content":"import { UserError } from 'graphql-errors'\nimport Show from '../../models/show'\nimport Vote from '../../models/vote'\nimport {\n  IMAGE_ENTRY, VIDEO_ENTRY, OTHER_ENTRY,\n  ADMIN, JUDGE\n} from '../../constants'\n// For Convenience: the 'base class' of functions for Photo / Video / OtherMedia\n// entry type fields, which they share.\nexport const EntryBase = {\n  group (entry) {\n    return entry.getGroup()\n  },\n  student (entry) {\n    return entry.getStudent()\n  },\n  score (entry) {\n    return entry.getScore()\n  },\n  show (entry) {\n    return Show.findByPk(entry.showId)\n  },\n  votes (entry, _, context) {\n    switch (context.authType) {\n      case ADMIN:\n        // Admins see all votes\n        return Vote.findAll({where: {entryId: entry.id}})\n      case JUDGE:\n        // Judges see only their own votes\n        return Vote.findAll({where: {entryId: entry.id, judgeUsername: context.username}})\n      default:\n        // Students cannot access this\n        throw new UserError('Students cannot access entry votes')\n    }\n  },\n  // Returning entry type directly on the base class, for convenience\n  entryType (entry) {\n    if (entry.entryType === IMAGE_ENTRY) {\n      return 'PHOTO'\n    } else if (entry.entryType === VIDEO_ENTRY) {\n      return 'VIDEO'\n    } else if (entry.entryType === OTHER_ENTRY) {\n      return 'OTHER'\n    }\n  }\n}"}