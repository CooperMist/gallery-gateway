{"chunk":3,"numChunks":5,"fileHash":"FTVxyvXutSBCmdkjGENcMO9g4XnY1eTbiig4nFadoUI=","filePath":"backend/helpers/submission.js","content":"export function allowedToSubmit (args, context) {\nexport function parseVideo (url) {\n  // /^(?:https?:\\/\\/|\\/\\/)? | Optional URL scheme. Either http, or https, or protocol-relative\n  // (?:www\\.|m\\.)?          | Optional www or m subdomain\n  // (?:                     | Group for host alternatives\n  //   youtu\\.be\\/           |   Either youtu.be\n  //   |youtube\\.com\\/       |   or youtube.com\n  //     (?:                 |   Group for path alternatives\n  //       embed\\/           |     Either /embed/\n  //       |v\\/              |     or /v/\n  //       |watch\\?v=        |     or /watch?v=\n  //       |watch\\?.+&v=     |     or /watch?other_param&v=\n  //     )                   |   End path alternatives\n  // )                       | End host alternatives\n  // ([\\w-]{11})             | 11 characters (Length of YouTube video ids)\n  // (?![\\w-])/              | Rejects if id is too long\n  // i                       | Case-insensitive\n  // See: http://stackoverflow.com/a/10524505\n  const YouTubeRegex = /^(?:https?:\\/\\/|\\/\\/)?(?:www\\.|m\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))([\\w-]{11})(?![\\w-])/i\n  // /^(?:https?:\\/\\/|\\/\\/)?            | Optional URL scheme. Either http, or https, or protocol-relative\n  // (?:www\\.|player\\.)?                | Optional www or player subdomain\n  // vimeo.com\\/                        | vimeo.com/\n  // (?:                                | Group for words before"}