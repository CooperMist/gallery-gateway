{"chunk":5,"numChunks":9,"fileHash":"YOuAqeDV8U74YnQ9wIMRlEJcJQERugrUkolbfgwnXMM=","filePath":"backend/test/routes/zipDownload.js","content":"/* eslint-disable no-unused-expressions */\ndescribe('downloading a zip file', () => {\n  it('Downloads an empty zip for a show with no submissions', (done) => {\n    fakeShow({name: 'myShow'})\n      .then(show => {\n        var files = [];\n        request(server)\n          .get(`/zips/${show.id}?token=${token}`)\n          .buffer().pipe(tar.t()).on('entry', entry => {\n            files.push(entry.path)\n          })\n          setTimeout(()=>{\n            expect(files.length)\n            .to.eq(0, 'Files Present: ' + files.length + '\\nshould have no files')\n            done()\n          }, 500)\n        })\n  })\n  it('Downloads a single student submitted image', (done) => {\n    fakeShow({name: 'Honors Show'})\n      .then((show) =>\n        fakeImageEntry({invited: true, path: 'imageA.jpg', show})\n          .then(entry =>\n            User.findById(entry.studentUsername)\n              .then(user => {\n                var files = []\n                request(server)\n                  .get(`/zips/${entry.showId}?token=${token}`)\n                  .buffer()\n                  .pipe(tar.t()).on('entry', entry => {\n                    files.push(entry.path)\n                  })\n                  setTimeout(()=>{\n                    expect(files.length).to.eq(1, 'Files Present: ' + files.length + '\\nshould have one file')\n                    expect(files).to.include(`${show.name}/Invited/${user.lastName}, ${user.firstName} - ${entry.title}.jpg`\n                    , 'Files Present: ' + files + `\\nshould contain file:\\n ${show.name}/Invited/${user.lastName}, ${user.firstName} - ${entry.title}.jpg\\n`)\n                    done()\n                  }, 500)\n                  \n                })\n              )\n          )\n              })"}