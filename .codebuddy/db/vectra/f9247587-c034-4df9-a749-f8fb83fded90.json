{"chunk":39,"numChunks":46,"fileHash":"rgY5LIVyu8ZXHuBTfXMXoWx/ctH+OGAgjLxB0j9j1Bs=","filePath":"backend/routes/download.js","content":"import fs from 'fs'\nrouter.route('/zips/shows/:showId')\n  .get(ensureAdminDownloadToken, (req, res, next) => {\n    // find the show\n    Show.findByPk(req.params.showId, { rejectOnEmpty: true })\n      .then(show => {\n        // find all image Entries to this show id\n        Entry.findAll({ where: { showId: req.params.showId, entryType: IMAGE_ENTRY } })\n          .then(entries => {\n            const imageIds = entries.map((entry) => entry.entryId)\n            return getImagesForZip(entries, imageIds)\n          })\n          .then((entries) => submissionsWithSubmittersPromise(entries))\n          .then(submissionsWithSubmitters => {\n            return buildSubmisionTitlesForDownload(submissionsWithSubmitters)\n          })\n          .then(entrySummaries => {\n            // Now we need to generate the tar file...\n            // entrySummaries:\n            // [\n            //   {\n            //     name: 'Last First - title.jpg',\n            //     path: 'path/to/image.jpg',\n            //     invited: true\n            //   },\n            //   ...\n            // ]\n            const archive = archiver('tar');\n            res.status(200)\n              .type('tar')\n              .attachment(`${show.name}.tar`);\n\n            archive.pipe(res);\n\n            entrySummaries.map((summary) => {\n              const filename = path.join(IMAGE_DIR, summary.path)\n              archive.append(fs.createReadStream(filename), { name: `${show.name}/${summary.invited ? 'Invited' : 'Not Invited'}/${summary.name}` });\n            })\n            archive.finalize();\n          })\n      })\n      .catch(sequelize.EmptyResultError, () => {\n        res.status(404).send('Show Not Found')\n      })\n      .catch(err => {\n        console.error(err)\n        res.status(500).send('Oops! Try again later.')\n      })\n"}