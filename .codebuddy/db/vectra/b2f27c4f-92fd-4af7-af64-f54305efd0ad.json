{"chunk":0,"numChunks":2,"fileHash":"8bExseqVYnhuNwH3lcwub/eDSla3iC+GbPoA+rA4fS0=","filePath":"frontend/src/Student/components/VideoSubmissionForm.js","content":"import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Loading from '../../shared/components/Loading'\nimport SubmissionForm from './SubmissionForm'\nclass VideoSubmissionForm extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      showModal: false\n    }\n\n    this.renderForm = this.renderForm.bind(this)\n  }\n\n  componentDidUpdate () {\n    if (this.props.data.error) {\n      this.props.data.error.graphQLErrors.forEach(e => {\n        this.props.handleError(e.message)\n      })\n    }\n  }\n\n  renderForm () {\n    const forShow = {\n      id: parseInt(this.props.data.show.id),\n      name: this.props.data.show.name\n    }\n\n    // calculate whether the user is beyond their single submissions\n    const numSingleEntries = this.props.data.show.entries.filter(e => !e.group).length\n    const canSubmitAsSingle = numSingleEntries < this.props.data.show.entryCap\n\n    return (\n      <SubmissionForm\n        type = 'Video'\n        forShow = {forShow}\n        canSubmitAsSingle = {canSubmitAsSingle}\n        showModal = {this.showModal}\n        {...this.props}\n      />\n    )\n  }\n\n  render () {\n    if (this.props.loading) return <Loading />\n    return (this.props.data.show) ? this.renderForm() : null\n  }\n}\nVideoSubmissionForm.propTypes = {\n  user: PropTypes.shape({\n    username: PropTypes.string,\n    hometown: PropTypes.string,\n    displayName: PropTypes.string\n  }).isRequired,\n  data: PropTypes.shape({\n    show: PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      entries: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string,\n          student: PropTypes.shape({\n            username: PropTypes.string\n          })\n        })\n      )\n    })\n  }).isRequired,\n  create: PropTypes.func.isRequired,\n  done: PropTypes.func.isRequired,\n  handleError"}