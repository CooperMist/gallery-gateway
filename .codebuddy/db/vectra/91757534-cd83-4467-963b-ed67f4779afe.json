{"chunk":12,"numChunks":20,"fileHash":"1RqJBYZ3ZoWKyYAMi1bUM9TATlzvqyN0gPpCdhJq+7Y=","filePath":"backend/test/resolvers/user.js","content":"/* eslint-disable no-unused-expressions */\ndescribe('User Resolvers', function () {\n  describe('Admin Creation Resolver', function () {\n    it('Does now allow non-admins to add an admin', function () {\n      expect(() =>\n        createAdmin('', {}, {auth: {type: 'STUDENT', username: 'billy'}})\n      ).to.throw(/Permission Denied/)\n      expect(() =>\n        createAdmin('', {}, {auth: {type: 'JUDGE', username: 'bob'}})\n      ).to.throw(/Permission Denied/)\n    })\n    it('Does not allow duplicate usernames', function (done) {\n      fakeUser({type: 'ADMIN'})\n        .then((me) => {\n          const input = {input: {\n            username: me.username,\n            firstName: 'Jane',\n            lastName: 'Doe'\n          }}\n          createAdmin('', input, {auth: {type: 'ADMIN'}})\n            .catch((err) => {\n              expect(err).to.exist\n              expect(err.message).to.equal('Username Already Exists')\n              done()\n            })\n        })\n    })\n    it('Does not allow null values', function (done) {\n      const input = {input: {username: 'user2'}}\n      createAdmin('', input, {auth: {type: 'ADMIN'}})\n        .catch((err) => {\n          expect(err).to.exist\n          const result = err.message.match(/notNull Violation/)\n          expect(result).to.not.equal(null)\n          done()\n        })\n    })"}