{"chunk":8,"numChunks":14,"fileHash":"kPWrDXhIKUQ64zprCsdQbC6o5j6evy17Pg420Gtz1SY=","filePath":"backend/test/resolvers/vote.js","content":"/* eslint-disable no-unused-expressions */\ndescribe('Vote Mutation', function () {\n  describe('Successes', function () {\n    it('overwrites a vote with the same username and entryId', function () {\n      return Promise.all([fakeUser({ type: 'JUDGE' }), fakeImageEntry()])\n        .then((models) => {\n          const user = models[0]\n          const entry = models[1]\n          return user.addShow(entry.showId).then(_ => {\n            var args = {\n              input: {\n                judgeUsername: user.username,\n                entryId: entry.id,\n                value: 2\n              }\n            }\n            return vote({}, args, { auth: { username: user.username, type: 'JUDGE' } })\n              .then(() => {\n                args.input.value = 0\n                return vote({}, args, { auth: { username: user.username, type: 'JUDGE' } })\n                  .then((v) => {\n                    expect(v.value).to.equal(0)\n                  })\n              })\n          })\n        })\n    })\n    it('creates a valid vote', function () {\n      return Promise.all([fakeUser({ type: 'JUDGE' }), fakeImageEntry()])\n        .then((models) => {\n          const user = models[0]\n          const entry = models[1]\n          return user.addShow(entry.showId).then(() => {\n            const args = {\n              input: {\n                judgeUsername: user.username,\n                entryId: entry.id,\n                value: 2\n              }\n            }\n            return vote({}, args, { auth: { username: user.username, type: 'JUDGE' } })\n              .then(vote => {\n                expect(vote.judgeUsername).to.equal(user.username)\n                expect(vote.entryId).to.equal(entry.id)\n                expect(vote.value).to.equal(2)\n              })\n          })\n        })\n    })"}