{"chunk":12,"numChunks":18,"fileHash":"vwBg+kbr14b49EtBgMTuzILb+K3HOxp0O6l1zSfMBzc=","filePath":"backend/test/resolvers/entryQuery.js","content":"/* eslint-disable no-unused-expressions */\ndescribe('Entry Queries', function () {\n  describe('Entries Query', function () {\n    describe('Success', function () {\n      // GraphQL requires 'fragments' so we can get (Photo, Video, OtherMedia)\n      // -specific properties even though the return type is a generic Entry\n      const photoFragment = `\n        fragment photoFields on Photo {\n          path,\n          horizDimInch,\n          vertDimInch,\n          mediaType\n        }\n      `\n      const videoFragment = `\n        fragment videoFields on Video {\n          provider,\n          videoId\n        }\n      `\n      const otherMediaFragment = `\n        fragment otherMediaFields on OtherMedia {\n          path\n        }\n      `\n      it('Gets an image entry when it exists', () =>\n        fakeImageEntry({ path: 'foo.jpg', horizDimInch: 3, vertDimInch: 4, mediaType: 'mymedia' })\n          .then(entry =>\n            execGraphql(\n              `query {\n                entries {\n                  id,\n                  title,\n                  entryType,\n                  ...photoFields\n                }\n              }\n              ${photoFragment}\n              `,\n              { type: 'ADMIN' }\n            )\n              .then(result => {\n                expect(result).to.deep.equal({\n                  data: {\n                    entries: [\n                      {\n                        id: `${entry.id}`, // must be cast to a string :(\n                        title: entry.title,\n                        entryType: 'PHOTO',\n                        path: 'foo.jpg',\n                        horizDimInch: 3,\n                        vertDimInch: 4,\n                        mediaType: 'mymedia'\n                      }\n                    ]\n                  }\n                })\n              })\n          )\n      )"}