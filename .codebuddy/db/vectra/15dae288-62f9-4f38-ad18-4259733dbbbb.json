{"chunk":0,"numChunks":1,"fileHash":"DuST9aVwP9gx9cKwkkxV49ioAvLey+gKIUZ7IQa6VdI=","filePath":"backend/resolvers/mutations/user.js","content":"import { UserError } from 'graphql-errors'\nimport User from '../../models/user'\nimport { ADMIN, JUDGE, STUDENT } from '../../constants'\nconst createUser = (_, args, context, type) => {\n  if (context.authType !== ADMIN) {\n    throw new UserError('Permission Denied')\n  }\n\n  return User.findOne({where: {username: args.input.username}})\n    .then((user) => {\n      // The user w/ that username doesn't exist, so create them\n      if (user === null) {\n        const user = {\n          ...args.input,\n          type\n        }\n        return User.create(user)\n      }\n\n      // Trying to create a user with the same username and role as another user\n      if (user.type === type) {\n        throw new UserError('Username Already Exists')\n      }\n\n      // Students can be elevated to Judges or Admins - No checks needed\n\n      // Judges can be elevated to Admins\n      if (user.type === JUDGE && type === STUDENT) {\n        throw new UserError('Judges cannot be converted to Students')\n      }\n\n      // Admins can't have their role changed\n      if (user.type === ADMIN) {\n        throw new UserError('Administrators cannot have their role changed')\n      }\n\n      user.type = type\n      user.firstName = args.input.firstName\n      user.lastName = args.input.lastName\n      return user.save()\n    })\n}"}