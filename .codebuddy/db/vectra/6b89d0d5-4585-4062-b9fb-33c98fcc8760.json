{"chunk":37,"numChunks":46,"fileHash":"rgY5LIVyu8ZXHuBTfXMXoWx/ctH+OGAgjLxB0j9j1Bs=","filePath":"backend/routes/download.js","content":"import fs from 'fs'\nfunction getImagesForZip(entries, imageIds) {\n  return Image.findAll({ where: { id: { $in: imageIds } } })\n    .then(images => {\n      // create a mapping of imageId -> image for easy assigning\n      // Evaluates to: [Entry]\n      const imageIdsToImage = images.reduce((obj, image) => ({\n        ...obj,\n        [image.id]: image\n      }), {})\n\n      // assign 'path' to all entries\n      entries.forEach(entry => {\n        if (entry.entryType === IMAGE_ENTRY && imageIdsToImage[entry.entryId] !== undefined) {\n          entry.path = imageIdsToImage[entry.entryId].path\n        }\n      })\n\n      return entries\n    })\n}\nfunction getPdfsForZip(entries, pdfIds) {\n  return Other.findAll({ where: { id: { $in: pdfIds } } })\n    .then(pdfs => {\n      // create a mapping of imageId -> image for easy assigning\n      // Evaluates to: [Entry]\n      const otherIdsToPdfs = pdfs.reduce((obj, pdf) => ({\n        ...obj,\n        [pdf.id]: pdf\n      }), {})\n\n      // assign 'path' to all entries\n      entries.forEach(entry => {\n        if (entry.entryType === OTHER_ENTRY && otherIdsToPdfs[entry.entryId] !== undefined) {\n          entry.path = otherIdsToPdfs[entry.entryId].path\n        }\n      })\n      return entries\n    })\n}\n/* \n * construct the calculated title for each entry\n * Evaluates to:\n * [\n *   {\n *     name: 'Last First - title.jpg',\n *     path: 'path/to/image.jpg',\n *     invited: true\n *   }\n * ]\n */"}