{"chunk":9,"numChunks":11,"fileHash":"bx36C3jrXY4J9x//mxTxhqCNu6Vm5nhaShtWFbWkafY=","filePath":"README.md","content":"Package dependencies will generally only need to be updated if packages contain security vulnerabilities or you will be developing additional features or upgrading Node versions. When running `npm install` or `yarn install`, you generally will be warned of deprecated package versions. It is recommended to also install [npm-check-updates](https://www.npmjs.com/package/npm-check-updates) and run `ncu` to check which packages are out-of-date. Then, read through the `CHANGELOG`s of each out-dated package (they're usually found on the package's npm page or GitHub repo) to see if there are any breaking changes. If there are, update any of this project's code impacted by the breaking changes and update the version of the package in the corresponding `package.json` file. Double check that the upgrade is compatible by making sure that all existing tests pass (Note: frontend updates that impact styling will likely need to be manually tested).\n\nDetermining the health of a package is subjective but usually involves identifying when its most recent commits were, how active the maintainers are in responding to Issues and Pull Requests, and the number of Issues and Pull Requests the project has. Additionally, new packages may be developed which offer similar features to a package we use, but because of non-functional characteristics (e.g. performance, user experience), the JavaScript community may collectively favor this new package over the old and recommend switching. A word of caution; though, beware of hype-driven development â€“ it plagues the JavaScript community.\n\n[Node.js LTS releases](https://github.com/nodejs/Release#release-schedule) are cut every year in April. Upgrading Node versions involves updating any uses of deprecated [Node API](https://nodejs.org/dist/latest/docs/api/) calls and making sure that all npm dependencies are compatible with the new Node version.\n\n"}