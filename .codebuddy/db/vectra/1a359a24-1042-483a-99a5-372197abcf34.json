{"chunk":1,"numChunks":2,"fileHash":"mrmOgdnunnUhFXXaOvrnTidpY0LpNd092xWWgQnVeUk=","filePath":"backend/resolvers/mutations/portfolioPeriod.js","content":"import { UserError } from 'graphql-errors'\nexport function updatePortfolioPeriod(_, args, context) {\n  // Only admins can update portfolio periods\n  if (context.authType !== ADMIN) {\n    throw new UserError('Permission Denied')\n  }\n  return PortfolioPeriod.findByPk(args.id)\n    .then((portfolio_period) => {\n      return portfolio_period.update(args.input, {\n        // All fields that are allowed to be updated\n        fields: ['name', 'description',\n          'startDate', 'endDate',\n          'judgingStartDate', 'judgingEndDate'\n        ]\n      })\n    })\n}\nexport async function assignJudgesToPortfolioPeriod(_, args, context) {\n  // Only admins can assign judges portfolio periods\n  if (context.authType !== ADMIN) {\n    throw new UserError('Permission Denied')\n  }\n  // destruct expected input\n  let { portfolioPeriodId, usernames } = args.input\n\n  // Check for required fields\n  portfolioPeriodId = parseInt(portfolioPeriodId)\n  if (isNaN(portfolioPeriodId)) throw new UserError('Portfolio Period Id must be a number')\n  if (!Array.isArray(usernames) || usernames.length === 0) throw new UserError('Judge username must be a string')\n\n\n  // create the a portfolio period judge for every judge username passed in\n  for (let idx = 0; idx < usernames.length; idx++) {\n    const judgeUsername = usernames[idx]\n    if (typeof judgeUsername !== \"string\") continue\n    const judge_in_portfolio_period = await PortfolioPeriodJudge.findOne({ where: { portfolioPeriodId, judgeUsername } })\n    // Chekc if the judge has already been assigned to this portoflio period\n    if (judge_in_portfolio_period !== null) continue\n    await PortfolioPeriodJudge.create(\n      {\n        portfolioPeriodId,\n        judgeUsername\n      })\n  }\n  return true\n}"}