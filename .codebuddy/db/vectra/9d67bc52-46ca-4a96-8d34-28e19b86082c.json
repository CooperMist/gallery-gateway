{"chunk":33,"numChunks":38,"fileHash":"0HdfV29crxybzCYcCSJEw6NdslXesS3O1aP5Kzlwt2A=","filePath":"backend/test/resolvers/entry.js","content":"import { expect } from 'chai'\ndescribe('Entry Mutations', function () {\n  describe('Video Creation', function () {\n    describe('Validation Failures', function () {\n      it('rejects entries with neither username nor group set', function () {\n        const args = {\n          input: {\n            entry: {\n              showId: 1,\n              title: 'mytitle',\n              comment: 'this is my comment',\n              forSale: false,\n              yearLevel: 'second',\n              academicProgram: 'learning',\n              moreCopies: false\n            },\n            url: 'https://vimeo.com/45196609'\n          }\n        }\n        return createVideo({}, args, { auth: { type: 'ADMIN' } })\n          .then(() => Promise.reject(new Error('should have rejected')))\n          .catch((e) => {\n            expect(e.message).to.match(/Entry must have an entrant/)\n            return Promise.resolve()\n          })\n      })\n      it('rejects non-admins making an entry for someone other than themself', function () {\n        const args = {\n          input: {\n            entry: {\n              studentUsername: 'user2',\n              showId: 1,\n              title: 'mytitle',\n              comment: 'this is my comment',\n              forSale: false,\n              yearLevel: 'second',\n              academicProgram: 'learning',\n              moreCopies: false\n            },\n            url: 'https://vimeo.com/45196609'\n          }\n        }\n        expect(() => {\n          createVideo({}, args, { auth: { type: 'STUDENT', username: 'user1' } })\n        }).to.throw('Permission Denied')\n      })"}