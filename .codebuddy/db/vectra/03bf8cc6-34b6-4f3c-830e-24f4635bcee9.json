{"chunk":17,"numChunks":38,"fileHash":"0HdfV29crxybzCYcCSJEw6NdslXesS3O1aP5Kzlwt2A=","filePath":"backend/test/resolvers/entry.js","content":"import { expect } from 'chai'\ndescribe('Entry Mutations', function () {\n  describe('Image Creation', function () {\n    describe('Validation Failures', function () {\n      it('rejects non-admins making an entry for someone other than themself', function () {\n        const args = {\n          input: {\n            entry: {\n              studentUsername: 'user2',\n              showId: 1,\n              title: 'mytitle',\n              comment: 'this is my comment',\n              forSale: false,\n              yearLevel: 'second',\n              academicProgram: 'learning',\n              moreCopies: false\n            },\n            path: 'a/path.jpg',\n            horizDimInch: 1.2,\n            vertDimInch: 1.3,\n            mediaType: 'mymedia'\n          }\n        }\n        expect(() => {\n          createPhoto({}, args, { auth: { type: 'STUDENT', username: 'user1' } })\n        }).to.throw('Permission Denied')\n      })\n      it('rejects images with invalid dimensions', function () {\n        return Promise.all([fakeShow(), fakeUser({ type: 'STUDENT' })])\n          .then(([show, user]) => {\n            const args = {\n              input: {\n                entry: standardEntry(user, show),\n                path: 'a/path.jpg',\n                horizDimInch: -1.2,\n                vertDimInch: -1.3,\n                mediaType: 'mymedia'\n              }\n            }\n            return createPhoto({}, args, { auth: { type: 'STUDENT', username: user.username } })\n              .then(() => Promise.reject(new Error('should have rejected')))\n              .catch((e) => {\n                expect(e.message).to.match(/must be positive/)\n                return Promise.resolve()\n              })\n          })\n      })"}