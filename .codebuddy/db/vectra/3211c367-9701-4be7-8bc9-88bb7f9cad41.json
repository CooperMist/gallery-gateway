{"chunk":0,"numChunks":1,"fileHash":"B742QzWvFp3otGf135z3LXB4TxpohiZAro+NoGKVgIc=","filePath":"backend/resolvers/queries/voteQuery.js","content":"import Vote from '../../models/vote'\r\nimport Entry from '../../models/entry'\r\n\r\nimport { UserError } from 'graphql-errors'\r\nimport { ADMIN, JUDGE } from '../../constants'\r\n\r\nexport function votes (_, args, context) {\r\n  const isRequestingOwnJudgeUser = context.username !== undefined &&\r\n    context.authType === JUDGE && context.username === args.judgeUsername\r\n  if (context.authType !== ADMIN && !isRequestingOwnJudgeUser) {\r\n    throw new UserError('Permission Denied')\r\n  }\r\n  // Get all entries on a show\r\n  return Entry.findAll({\r\n    where: { showId: args.showId }\r\n  }).then((showEntries) => {\r\n    // search for the entires that match the permission constraints\r\n    const entryIds = showEntries.map(entry => entry.id)\r\n    return getVotes(args.judgeUsername, context.authType, entryIds)\r\n  })\r\n}\r\n\r\nexport function vote (_, args, context) {\r\n  const isRequestingOwnJudgeUser = context.username !== undefined &&\r\n    context.authType === JUDGE && context.username === args.judgeUsername\r\n  if (context.authType !== ADMIN && !isRequestingOwnJudgeUser) {\r\n    throw new UserError('Permission Denied')\r\n  }\r\n  return Vote.findOne({\r\n    where: {\r\n      judgeUsername: args.judgeUsername,\r\n      entryId: args.entryId\r\n    }\r\n  })\r\n}\r\n\r\nfunction getVotes (username, authType, entryIds) {\r\n  // Give all votes on the show if the user\r\n  // is an admin and username was not given\r\n  if (authType === ADMIN && !username) {\r\n    return Vote.findAll({\r\n      where: { entryId: entryIds }\r\n    })\r\n  } else {\r\n    // Return the votes only for the given judge\r\n    return Vote.findAll({\r\n      where: {\r\n        judgeUsername: username,\r\n        entryId: entryIds\r\n      }\r\n    })\r\n  }\r\n}\r\n"}