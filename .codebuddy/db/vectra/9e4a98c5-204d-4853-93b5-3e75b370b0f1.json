{"chunk":6,"numChunks":8,"fileHash":"CJmE7kH58HMTaxvWwrOMrJ9RqKuoM+uzslRdXxD+DqM=","filePath":"frontend/src/Judge/pages/Vote.js","content":"import React, { Component } from 'react'\nconst mapStateToProps = (state, ownProps) => {\n  const showId = ownProps.match.params.id\n  const { order = [], loadingVotes = true, loadingSubmissions = true } =\n    state.judge.queues[showId] || {}\n  let { on: submissionId } = queryString.parse(state.router.location.search)\n  // If this submissionId is not in the ordering, throw it out\n  if (order.indexOf(submissionId) < 0) {\n    submissionId = null\n  }\n  // No satisfactory submission ID was found. If the data is loaded, loop\n  // through the order and find the first un-voted submission; we'll use that one.\n  // In the event that _all_ submissions have votes, use the first submission.\n  if (submissionId === null && !loadingSubmissions && !loadingVotes) {\n    for (let i = 0; i < order.length; i++) {\n      const candidateSubmissionId = order[i]\n      const isVoted = !!state.judge.votes.byEntryId[candidateSubmissionId]\n      if (!isVoted) {\n        submissionId = candidateSubmissionId\n        break\n      }\n    }\n\n    // If everything is voted on, just set the current submission to the first one\n    if (submissionId === null) {\n      submissionId = order[0] || null\n    }\n\n    if (submissionId !== null) {\n      const newQueryString = queryString.stringify({\n        ...queryString.parse(ownProps.location.search),\n        on: submissionId\n      })\n      ownProps.history.replace(`/show/${showId}/vote?${newQueryString}`)\n    }\n  }\n  const viewing = submissionId !== null ? order.indexOf(submissionId) : null\n  const submissions = state.judge.submissions\n  const votes = state.judge.votes"}