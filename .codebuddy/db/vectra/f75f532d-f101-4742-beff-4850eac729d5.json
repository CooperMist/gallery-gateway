{"chunk":2,"numChunks":8,"fileHash":"BTqcXOsAMThcBAe314RsWKJAgUhWtf30vUb9gNWcfGs=","filePath":"frontend/src/Admin/components/portfolio/AssignJudgesPortfolioPeriodTable.js","content":"import React, { Component, Fragment, useEffect, useState } from 'react'\nfunction AssignJudgesPortfolioPeriodTable({\n}) {\n  // component state\n  const [allJudges, setAllJudges] = useState(undefined)\n  const [assignedJudges, setAssignedJudges] = useState(portfolioPeriod ? portfolioPeriod.judges : undefined)\n  const [unassignedJudges, setUnassignedJudges] = useState(undefined)\n  const [state, setState] = useState({\n    isUnassignConfirmationOpen: false,\n    judgesFetched: false,\n    selectedUnassignedJudges: {},\n    selectedAssignedJudges: {}\n  })\n  useEffect(() => {\n    if(portfolioPeriod && Array.isArray(portfolioPeriod.judges)){\n      setAssignedJudges(portfolioPeriod.judges)\n    }\n  }, [portfolioPeriod])\n  /**\n   * Effect for dispatch the fetch judges action then storing the judges in state\n   */\n  useEffect(() => {\n    if (allJudges === undefined && state.judgesFetched === false) {\n      async function doFetch() {\n        const judges = (await fetchJudges()).payload\n        if (Array.isArray(judges) && judges.length > 0) {\n          setAllJudges(judges)\n        }\n      }\n      doFetch()\n      setState({\n        ...state,\n        judgesFetched: true\n      })\n    }\n  }, [allJudges, state.judgesFetched])\n  /**\n   * Effect for building the array of unassigned judges\n   */\n  useEffect(() => {\n    if (Array.isArray(allJudges)) {\n      const assignedJudgesArray = Array.isArray(assignedJudges) ? assignedJudges.map(judge => judge.username) : []\n      const assignedJudgesSet = new Set(assignedJudgesArray)\n      setUnassignedJudges(allJudges.filter(judge => !assignedJudgesSet.has(judge.username)))\n   "}