{"chunk":0,"numChunks":1,"fileHash":"2ha6LF53ttRdX9buUX9mfTTpscLfBY6nY7E2TFM2YfI=","filePath":"frontend/src/Judge/actions.js","content":"import { push } from 'connected-react-router'\nimport SubmissionQuery from './queries/submission.graphql'\nimport SubmissionsQuery from './queries/submissions.graphql'\nimport { displayError } from '../shared/actions'\nimport ShowVotes from './queries/showVotes.graphql'\nimport GetVote from './queries/entryVote.graphql'\nexport const FETCH_SUBMISSION = 'FETCH_SUBMISSION'\nexport const FETCH_SUBMISSIONS = 'FETCH_SUBMISSIONS'\nexport const FETCH_VOTES = 'FETCH_VOTES'\nexport const FETCH_VOTE = 'FETCH_VOTE'\nexport const WILL_FETCH_VOTES = 'WILL_FETCH_VOTES'\nexport const WILL_FETCH_SUBMISSIONS = 'WILL_FETCH_SUBMISSIONS'\nexport const fetchSubmission = submissionId => (dispatch, getState, client) => {\n  return client\n    .query({\n      query: SubmissionQuery,\n      variables: {\n        id: submissionId\n      }\n    })\n    .then(({ data: { submission } }) =>\n      dispatch({ type: FETCH_SUBMISSION, payload: submission })\n    )\n    .catch(err => dispatch(displayError(err.message)))\n}\nexport const fetchSubmissions = showId => (dispatch, getState, client) => {\n  const { shared: { auth: { user: { username } } } } = getState()\n\n  dispatch({ type: WILL_FETCH_SUBMISSIONS, payload: showId })\n  return client\n    .query({\n      query: SubmissionsQuery,\n      variables: {\n        id: showId\n      }\n    })\n    .then(({ data: { submissions } }) =>\n      dispatch({\n        type: FETCH_SUBMISSIONS,\n        payload: {\n          submissions: submissions.filter(s => !s.excludeFromJudging),\n          username\n        }\n      })\n    )\n    .catch(err => dispatch(displayError(err.message)))\n}"}