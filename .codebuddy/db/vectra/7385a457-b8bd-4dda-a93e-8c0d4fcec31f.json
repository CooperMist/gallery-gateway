{"chunk":12,"numChunks":14,"fileHash":"kPWrDXhIKUQ64zprCsdQbC6o5j6evy17Pg420Gtz1SY=","filePath":"backend/test/resolvers/vote.js","content":"/* eslint-disable no-unused-expressions */\ndescribe('Vote Mutation', function () {\n  describe('Validation Failures', function () {\n    it('only allows judges to vote as themselves', function () {\n      return Promise.all([fakeUser({ type: 'JUDGE' }), fakeImageEntry()])\n        .then((models) => {\n          const user = models[0]\n          const entry = models[1]\n          const args = {\n            input: {\n              judgeUsername: 'someOtherJudge',\n              entryId: entry.id,\n              value: 2\n            }\n          }\n          expect(() => {\n            vote({}, args, { auth: { username: user.username, type: 'JUDGE' } })\n          }).to.throw('Permission Denied')\n        })\n    })\n    it('doesn\\'t let admins vote for other judges', function () {\n      return Promise.all([fakeUser({ type: 'JUDGE' }), fakeImageEntry()])\n        .then((models) => {\n          const user = models[0]\n          const entry = models[1]\n          const args = {\n            input: {\n              judgeUsername: 'someOtherJudge',\n              entryId: entry.id,\n              value: 2\n            }\n          }\n          expect(() => {\n            vote({}, args, { auth: { username: user.username, type: 'ADMIN' } })\n          }).to.throw('Permission Denied')\n        })\n    })\n    it('produces a user error when the entry to vote on is not found', function () {\n      return fakeUser({ type: 'JUDGE' }).then((judge) => {\n        var args = {\n          input: {\n            judgeUsername: judge.username,\n            entryId: 2000,\n            value: 2\n          }\n        }\n        return vote({}, args, { auth: { username: judge.username, type: 'JUDGE' } })\n          .catch((err) => {\n            expect(err.message).to.equal"}