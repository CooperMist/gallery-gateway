{"chunk":0,"numChunks":2,"fileHash":"O2qFKvA37dYDuXifFKCCT+xpm1lrVtUCo3CVj8BXs2Q=","filePath":"backend/models/portfolio.js","content":"import DataTypes from 'sequelize'\nimport sequelize from '../config/sequelize'\nimport Entry from './entry'\nimport PortfolioRating from './portfolioRating'\n// Defines a portfolio object and all of its fields\nconst Portfolio = sequelize.define('portfolio', {\n  // Title of the portfolio\n  title: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    notEmpty: true\n  },\n  // The username of the student who owns the portfolio\n  studentUsername: {\n    allowNull: true,\n    type: DataTypes.STRING,\n    references: {\n      model: 'users',\n      key: 'username'\n    },\n    onDelete: 'cascade',\n    onUpdate: 'cascade'\n  },\n  // Leave it for reasons unbeknownst to anyone anymore\n  name: {\n    type:DataTypes.STRING,\n    allowNull: true\n  },\n  // The portfolioPeriodId the portfolio is associated with\n  portfolioPeriodId: {\n    type: DataTypes.INTEGER,\n    references: {\n      model: 'portfolioPeriods',\n      key: 'id'\n    },\n    onDelete: 'no action',\n    onUpdate: 'cascade'\n  },\n  score: {// added score to support scholarship judging functionality\n    type: DataTypes.DOUBLE,\n    defaultValue: 0,\n    allowNull: false\n  }\n})\nPortfolio.prototype.getEntries = function getEntries () {\n  return Entry.findAll({ where: { portfolioId: this.id } })\n}\n/*\n* Calculate the score for a portfolio\n*/\nPortfolioRating.prototype.getScore = function getScore () {\n  // Calculate score by getting all votes with this\n  // entry id and then averaging over the sum of the votes\n  return PortfolioRating.findAll({ where: { porfolioId: this.id } })\n    .then((ratings) => {\n      const ratingValues = ratings.map(rating => rating.value)\n      if (ratingValues.length === 0) {\n        return 0\n      }\n      return ratingValues.reduce((acc, curr)"}