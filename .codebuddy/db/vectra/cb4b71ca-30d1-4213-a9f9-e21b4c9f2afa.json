{"chunk":8,"numChunks":10,"fileHash":"Q27W7MzCMk8N8DtIEpoSEyPIYhKAnqsNxX7u7CE3Zrs=","filePath":"frontend/src/Judge/pages/PortfolioRating.js","content":"import React, { useEffect, useState, Component } from \"react\";\nconst mapStateToProps = (state, ownProps) => {\n    const portfolioPeriodId = ownProps.match.params.id\n    const { order = [], loadingRatings = true, loadingPortfolios = true } =\n      state.judge.queues[portfolioPeriodId] || {}\n    let { on: portfolioId } = queryString.parse(state.router.location.search)\n    console.log(\"portfolioPeriodId: \" + portfolioPeriodId + \"\\n\")\n    console.log(\"portfolio collection thing: \" + state.judge.queues[portfolioPeriodId] + \"\\n\")\n    // If this portfolioId is not in the ordering, throw it out\n    if (order.indexOf(portfolioId) < 0) {\n      portfolioId = null\n    }\n    // No satisfactory submission ID was found. If the data is loaded, loop\n    // through the order and find the first un-voted submission; we'll use that one.\n    // In the event that _all_ submissions have votes, use the first submission.\n    if (portfolioId === null && !loadingPortfolios && !loadingRatings) {\n      for (let i = 0; i < order.length; i++) {\n        const candidatePortfolioId = order[i]\n        const isRated = !!state.judge.ratings.byPortfolioId[candidatePortfolioId]\n        if (!isRated) {\n          portfolioId = candidatePortfolioId\n          break\n        }\n      }\n  \n      // If everything is voted on, just set the current submission to the first one\n      if (portfolioId === null) {\n        portfolioId = order[0] || null\n      }\n  \n      if (portfolioId !== null) {\n        const newQueryString = queryString.stringify({\n          ...queryString.parse(ownProps.location.search),\n          on: portfolioId\n        })\n        ownProps.history.replace(`/portfolio-period/${portfolioPeriodId}/rating?${newQueryString"}