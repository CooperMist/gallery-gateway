{"chunk":0,"numChunks":1,"fileHash":"y93DjEkAO+UPOhyb2iDmqmiVIBYZTXfuVPNgzp5n7yU=","filePath":"backend/resolvers/queries/portfolioQuery.js","content":"import Portfolio from '../../models/portfolio'\r\nimport { UserError } from 'graphql-errors'\r\nimport { ADMIN, JUDGE } from '../../constants'\r\nimport { isRequestingOwnUser } from './queryUtils'\r\n\r\nexport function portfolio (_, args, context) {\r\n  return Portfolio.findByPk(args.id)\r\n}\r\n\r\nexport function portfolios (_, args, context) {\r\n  // Students can only look at their own portfolios\r\n  if (args.studentUsername && context.authType !== ADMIN && !isRequestingOwnUser(context, args)) {\r\n     throw new UserError('Permission Denied')\r\n   }\r\n\r\n  // Apply ordering, if desired\r\n  const order = args.orderBy ? { order: [[args.orderBy.sort, args.orderBy.direction]] } : {}\r\n\r\n  // If username given, show all portfolios the student has submitted to\r\n  if (args.studentUsername) {\r\n    // Get all the portfolios the student has been on\r\n    // (including as group creator), through entries\r\n    const whereClause = {\r\n      where: {\r\n        studentUsername: args.studentUsername\r\n      }\r\n    }\r\n    return Portfolio.findAll(Object.assign({}, whereClause, order))\r\n  }\r\n\r\n  // Otherwise just show all portfolios (with possible ordering)\r\n  return Portfolio.findAll(order)\r\n}\r\n\r\n\r\nexport function periodPortfolios (_, args, context) {\r\n  // Students can only look at their own portfolios\r\n  if (context.authType !== ADMIN && context.authType !== JUDGE) {\r\n     throw new UserError('Permission Denied')\r\n   }\r\n\r\n  return Portfolio.findAll({\r\n      where: {\r\n        portfolioPeriodId: args.portfolioPeriodId\r\n      }\r\n    })\r\n}\r\n\r\n\r\n"}