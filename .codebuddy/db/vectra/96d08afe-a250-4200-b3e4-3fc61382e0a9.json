{"chunk":2,"numChunks":3,"fileHash":"czkDHqPeirYMW5oClkMWfY404QoifvghtB7rSvR7tuk=","filePath":"frontend/src/Student/components/scholarships/Scholarships.js","content":"import React, { useState } from \"react\"\nfunction Scholarships(props) {\n    const { scholarships, createScholarshipSubmission } = props\n    // The portfolio period and portfolio id are provided via route params\n    const path = new URLSearchParams(window.location.search)\n    const portfolioId = path.get(\"portfolioId\")\n    const portfolioPeriodId = path.get(\"portfolioPeriodId\")\n    const [essayPath, setEssayPath] = useState(\"\")\n    // Handle rendering inavlid or no scholarships\n    if (!Array.isArray(scholarships) || scholarships.length === 0) {\n        return (\n            <Container>\n                <h1 className=\"mt-3 mb-5\">Scholarships</h1>\n                <p>There are no scholarships to apply to.</p>\n            </Container>\n        )\n    }\n    /**\n     * Saves the uploaded PDF on the server and then saves the link to the stored in the server in component state\n     * @param {string} _ The action performed, since we only render the \"other\" entry type this will always be \"file\"\n     * @param {*} file The pdf file submitted by the users\n     */\n    async function handleEssayUpload(_, file){\n        const pdf_upload_response = await props.handlePDFUpload(file)\n        const pdf_path = pdf_upload_response.path\n        // Dont do anything if pdf upload failed\n        if(typeof pdf_path !== \"string\") return\n        setEssayPath(pdf_path)\n    }\n    function SubmissionAlert() {\n        if (portfolioId) return <React.Fragment></React.Fragment>\n\n        // Build the message for which pieces of required data are missing\n        return (\n            <Alert color=\"warning\">\n                You have not provided a portfolio to apply to scholarships. You may still view scholarships but you cannot apply. <Link to=\"/portfolios\">Select a portfolio to apply.</Link>\n            </Alert>\n        )\n    }"}