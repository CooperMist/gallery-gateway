{"chunk":0,"numChunks":1,"fileHash":"Ln9v/R+p3ZsrS1RRmkxffWbqmXwIv1aTR8Hck9/wRuw=","filePath":"frontend/src/Admin/pages/AssignJudges.js","content":"import React, { Component, Fragment } from 'react'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { compose } from 'recompose'\r\n\r\nimport AssignJudgesTable from '../containers/AssignJudgesTable'\r\nimport CreateJudgeForm from '../containers/CreateJudgeForm'\r\nimport NotFound from '../../shared/components/NotFound'\r\nimport { fetchShow } from '../actions'\r\n\r\nconst FormContainer = styled.div`\r\n  margin-top: 25px;\r\n  margin-bottom: 25px;\r\n`\r\n\r\nclass AssignJudges extends Component {\r\n  static propTypes = {\r\n    show: PropTypes.any // Object w/ 'id' and 'name' property or something falsey\r\n  }\r\n\r\n  componentDidMount () {\r\n    const { id } = this.props.match.params\r\n\r\n    if (id) {\r\n      this.props.fetchData(id)\r\n    }\r\n  }\r\n\r\n  renderPage (show) {\r\n    return (\r\n      <Fragment>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <h1>{show.name}</h1>\r\n            </Col>\r\n          </Row>\r\n          <hr />\r\n        </Container>\r\n        <Container fluid>\r\n          <AssignJudgesTable showId={show.id} />\r\n          <FormContainer>\r\n            <CreateJudgeForm />\r\n          </FormContainer>\r\n        </Container>\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    // TODO: Show loading if loading so that 'Not Found' doesn't flash on valid shows\r\n    return this.props.show ? this.renderPage(this.props.show) : <NotFound />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ admin }, ownProps) => ({\r\n  show: admin.shows[ownProps.match.params.id]\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchData: showId => dispatch(fetchShow(showId))\r\n})\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(\r\n  AssignJudges\r\n)\r\n"}