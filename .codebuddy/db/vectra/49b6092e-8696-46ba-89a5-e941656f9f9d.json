{"chunk":9,"numChunks":10,"fileHash":"NwnJmqVtcw929OOjR1k4Nt7Zb/Ev6RO/04W79rmC4J8=","filePath":"backend/resolvers/mutations/entry.js","content":"import db from '../../config/sequelize'\nconst isSubmissionEntryOpen = (\n  {\n    input: {\n      entry: {\n        showId\n      }\n    }\n  },\n  t\n) => {\n  if( !showId){\n    return Promise.resolve();\n  }\n  return Show.findByPk(showId, { transaction: t, rejectOnEmpty: true })\n    .then(show => {\n      if (moment().isBefore(moment(show.entryEnd))) {\n        return Promise.resolve()\n      } else {\n        throw new UserError('Submission deadline has ended')\n      }\n    })\n}\nexport function updateEntry (_, args, context) {\n  // Only admins can update entries\n  if (context.authType !== ADMIN) {\n    throw new UserError('Permission Denied')\n  }\n  return Entry.findByPk(args.id)\n    .then(entry => entry.update(args.input, {\n      fields: ['title', 'comment', 'forSale', 'invited', 'yearLevel',\n        'academicProgram', 'moreCopies', 'excludeFromJudging']\n    }))\n}\nexport function createPhoto (_, args, context) {\n  if (context.authType !== ADMIN && !allowedToSubmit(args, context)) {\n    // don't allow non-admins to submit work claiming to be from someone else\n    throw new UserError('Permission Denied')\n  }\n  return db.transaction(t =>\n    canMakeMoreSingleEntries(args, t)\n      .then(() =>\n        isSubmissionEntryOpen(args, t)\n          .then(() =>\n            Image.create({\n              path: args.input.path,\n              horizDimInch: args.input.horizDimInch,\n              vertDimInch: args.input.vertDimInch,\n              mediaType: args.input.mediaType\n            }, { transaction: t })\n              .then(image =>\n                createEntry(args.input.entry, IMAGE_ENTRY, image.id, t)\n              )\n          )\n      )\n  )\n}"}