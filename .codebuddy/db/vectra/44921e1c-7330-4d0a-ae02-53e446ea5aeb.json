{"chunk":8,"numChunks":10,"fileHash":"YgxFyNPtILK2ZLMBdoFiJwxzp0jKkdjgtk59c9UIcvk=","filePath":"backend/test/resolvers/voteQuery.js","content":"import { expect } from 'chai'\ndescribe('Vote Queries', function () {\n  describe('Votes query', function () {\n    it('Allows judges to see their own votes', function () {\n      const username = 'user77'\n      return fakeVoteReturnShowId({ user: fakeUser({ username: username }) })\n        .then((showId) => {\n          votes({}, { judgeUsername: username, showId: showId },\n            { auth: { type: 'JUDGE', username: username } })\n            .then(result => {\n              expect(result[0].judgeUsername).to.equal(username)\n            })\n        })\n    })\n    it('Does not let a judge see a different judge\\'s vote', function () {\n      return fakeVoteReturnShowId({ user: fakeUser({ username: 'user100' }) })\n        .then((showId) => {\n          expect(() => {\n            votes({}, { judgeUsername: 'adifferetuser', showId: showId },\n              { auth: { type: 'JUDGE', username: 'user100' } })\n          }).to.throw(/Permission Denied/)\n        })\n    })\n    it('lets admins see all votes if no judge username is given', function () {\n      return fakeShow().then((s) =>\n        fakeVoteReturnShowId({ entry: fakeImageEntry({ show: s }) })\n          .then(() =>\n            fakeVoteReturnShowId({ entry: fakeImageEntry({ show: s }) })\n              .then((showId) =>\n                votes({}, { showId: showId },\n                  { auth: { type: 'ADMIN', username: 'abc123' } })\n                  .then(result => {\n                    expect(result.length).to.equal(2)\n                    expect(result[0].judgeUsername).to.not.equal(result[1].judgeUsername)\n                    expect(result[0].entryId).to.not.equal(result[1].entryId)\n                  })\n              )\n          )\n     "}