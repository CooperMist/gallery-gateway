{"chunk":8,"numChunks":10,"fileHash":"NwnJmqVtcw929OOjR1k4Nt7Zb/Ev6RO/04W79rmC4J8=","filePath":"backend/resolvers/mutations/entry.js","content":"import db from '../../config/sequelize'\n// Rejects the promise if the supplied args indicate the student is doing a\n// single (non-group) submission, but they have met their limit.\nconst canMakeMoreSingleEntries = (\n  {\n    input: {\n      entry: {\n        studentUsername = null,\n        group = null,\n        showId\n      }\n    }\n  },\n  t\n) => {\n  if (!studentUsername && !group) {\n    return Promise.reject(new UserError('Entry must have an entrant'))\n  }\n  // if submitting as a group, ignore this check\n  if (group && group.creatorUsername) {\n    return Promise.resolve()\n  }\n  // ignore submission cap for portfolios\n  if( !showId){\n    return Promise.resolve();\n  }\n  // find the entry cap for this show\n  return Show.findByPk(showId, { transaction: t, rejectOnEmpty: true })\n    .then(show =>\n      Entry.count({ where: { showId, studentUsername } })\n        .then(entries => {\n          if (entries >= show.entryCap) {\n            throw new UserError('Individual submission limit reached')\n          } else {\n            return Promise.resolve()\n          }\n        })\n    )\n}"}