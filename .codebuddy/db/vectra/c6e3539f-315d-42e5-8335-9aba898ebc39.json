{"chunk":16,"numChunks":18,"fileHash":"vwBg+kbr14b49EtBgMTuzILb+K3HOxp0O6l1zSfMBzc=","filePath":"backend/test/resolvers/entryQuery.js","content":"/* eslint-disable no-unused-expressions */\ndescribe('Entry Queries', function () {\n  describe('Entries Query', function () {\n    describe('Success', function () {\n      it('Can limit to a certain show', () =>\n        Promise.all([fakeImageEntry(), fakeImageEntry()])\n          .then(([image1, image2]) => {\n            expect(image1.showId).to.not.equal(image2.showId)\n            return execGraphql(\n              `query {\n                entries(showId: ${image1.showId}) {\n                  id\n                }\n              }`,\n              { type: 'ADMIN' }\n            )\n              .then(result => {\n                expect(result.data.entries).to.have.lengthOf(1)\n                expect(result.data.entries[0].id).to.eq(`${image1.id}`)\n              })\n          })\n      )\n      it('allows students to search for just their own entries', () =>\n        // first, set up a fake user, give them a group, and make three entries:\n        // one from the user, one from the group, and one from someone else\n        fakeUser().then(user =>\n          Promise.all([fakeImageEntry({ user }), fakeImageEntry()])\n            .then(([userEntry, outsiderEntry]) => ({\n              user,\n              userEntry,\n              outsiderEntry\n            }))\n        )\n          // models are made, do the graphql query\n          .then(({ user, userEntry, outsiderEntry }) =>\n            execGraphql(\n              `query {\n              entries(studentUsername: \"${user.username}\") {\n                id\n                student {\n                  username\n                }\n              }\n            }`,\n              { type: 'STUDENT', username: user.username }\n            )\n              // ensure proper entries were returned\n              .then(result => {\n                expect(result.data.entries).to.have.lengthOf(1)\n                expect(result.data.entries[0]).to.deep.eq({\n                  id: `${userEntry.id}`,\n                  student: {\n                    username: `${user.username}`\n                 "}