{"chunk":32,"numChunks":38,"fileHash":"0HdfV29crxybzCYcCSJEw6NdslXesS3O1aP5Kzlwt2A=","filePath":"backend/test/resolvers/entry.js","content":"import { expect } from 'chai'\ndescribe('Entry Mutations', function () {\n  describe('Video Creation', function () {\n    describe('Validation Failures', function () {\n      it('rejects invalid video sources', function () {\n        return Promise.all([fakeUser(), fakeShow()])\n          .then((models) => {\n            const user = models[0]\n            const show = models[1]\n            const args = {\n              input: {\n                entry: {\n                  studentUsername: user.username,\n                  showId: show.id,\n                  title: 'mytitle',\n                  comment: 'this is my comment',\n                  forSale: true,\n                  yearLevel: 'third',\n                  academicProgram: 'learning',\n                  moreCopies: false\n                },\n                url: 'https://www.facebook.com/facebook/videos/10156005054966729/'\n              }\n            }\n            expect(() => {\n              createVideo({}, args, { auth: { type: 'STUDENT', username: user.username } })\n            }).to.throw('The video URL must be a valid URL from Youtube or Vimeo')\n          })\n      })\n      it('rejects non-existent show ids', function () {\n        const args = {\n          input: {\n            entry: {\n              studentUsername: 'user1',\n              showId: 1,\n              title: 'mytitle',\n              comment: 'this is my comment',\n              forSale: false,\n              yearLevel: 'second',\n              academicProgram: 'learning',\n              moreCopies: false\n            },\n            url: 'https://vimeo.com/45196609'\n          }\n        }\n        return createVideo({}, args, { auth: { type: 'STUDENT', username: 'user1' } })\n          .then(() => Promise.reject(new Error('should have rejected')))\n          .catch((e) => {\n            expect(e.message).to.not.equal('should have rejected')\n            return Promise.resolve()\n          })\n      })"}