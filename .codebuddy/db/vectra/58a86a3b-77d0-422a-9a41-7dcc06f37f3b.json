{"chunk":0,"numChunks":1,"fileHash":"uk721vdrogFqYGTvEou49L4f/B+cHmoMsLC3ouN/S4Q=","filePath":"backend/resolvers/mutations/scholarshipSubmissions.js","content":"\r\nimport { UserError } from 'graphql-errors'\r\nimport { STUDENT } from '../../constants'\r\nimport Portfolio from '../../models/portfolio'\r\n\r\nimport ScholarshipSubmission from '../../models/scholarshipSubmissions'\r\n\r\nexport async function createScholarshipSubmission(_, args, context) {\r\n  // only admins can create scholarships\r\n  if (context.authType !== STUDENT) {\r\n    throw new UserError('Permission Denied')\r\n  }\r\n  const { scholarshipId, portfolioId, essayPath } = args.input\r\n  \r\n  // Grab the associated portfolio period id from the portfolio\r\n  const portfolio = await Portfolio.findByPk(portfolioId)\r\n  if (!portfolio) {\r\n    throw new UserError(\"No portfolio found with the provided id.\")\r\n  }\r\n  const portfolioPeriodId = portfolio.portfolioPeriodId\r\n\r\n  // Check that all required fields have been supplied\r\n  if(!scholarshipId || !portfolioPeriodId || !portfolioId){\r\n    throw new UserError(\"Missing required fields\")\r\n  }\r\n\r\n  // Check if the user has submitted to this scholarship before\r\n  const hasSubmitted = await ScholarshipSubmission.findOne({where: {scholarshipId, portfolioId, portfolioPeriodId} })\r\n  if( hasSubmitted ){\r\n    throw new UserError(\"You've already submitted to this scholarship with this portfolio.\")\r\n  }\r\n\r\n  // Build the scholarship submission\r\n  const newScholarshipSubmissions = {\r\n    scholarshipId,\r\n    portfolioId,\r\n    portfolioPeriodId, \r\n    essayPath\r\n  }\r\n\r\n  return ScholarshipSubmission.create(newScholarshipSubmissions)\r\n}"}